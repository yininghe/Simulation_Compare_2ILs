###############################################################################
# MD simulation example
###############################################################################

###############################################################################
# VARIABLES
###############################################################################
clear
# Configuration files
variable cfgFile         string "nve_input_Q8e_340K.data"
# Timesteps
variable numSteps        equal  10000000
variable dt              equal  0.001

variable SR_CUTOFF equal 12.0
variable LR_CUTOFF equal 12.0

# Temperature
variable T equal 340
# how often to save
variable statstep equal 10000  #saving statistics
variable trajstep equal 10000  #saving trjactory
variable comstep equal 10000  #saving center-of-mass (com) data

# time constants for NPT (no need to change)
variable THERMO_DAMP equal 0.1 #time constant for thermostat
variable BARO_DAMP equal 1.0   #time constant for barostat
# time constants for NVT (no need to change)
#variable THERMO_DAMP_NVT equal 1.0

###############################################################################
# GENERAL SETUP
###############################################################################
units metal  #eV, A
boundary p p f
atom_style full

###############################################################################
# Empirical IP: OPLS
###############################################################################

bond_style      harmonic
angle_style     harmonic
dihedral_style  opls
pair_style      lj/cut/coul/long ${SR_CUTOFF} ${LR_CUTOFF}
special_bonds lj 0.0 0.0 0.5 coul 0.0 0.0 0.5

kspace_style pppm 1.0e-6
kspace_modify slab 3.0

read_data ${cfgFile}

###############################################################################
# INTEGRATOR
###############################################################################

# Comment out following compute property/atom command because newer version of
# lammps support molecule ID directly.
# compute mol_id all property/atom mol

# Need to modify and check the group list
group bmpy molecule 1:1000
group ntf2 molecule 1001:2000
# In matlab code, Pt layers contacting ILs have mol-ID of (IL-mol-id+1) & (IL-mol-id+2)
# for negative (bottom Pt layers) & positive (top Pt layers) electrodes, respectively
group mobile molecule 1:2002
group immobile molecule 2003:2004

# velocity initialization only for the (IL + Pt) mobile ions, excluding Pt immobile atoms
velocity mobile create ${T} 102486 mom yes rot yes dist gaussian #velocity initialization; no need to change


# Need to put fix immobile setforce here before geometry optimization. Otherwise
# the geometry optimization will bend the immobile Pt atoms somewhat.
# Freeze Pt atoms, https://docs.lammps.org/fix_setforce.html
fix fxPtAtoms immobile setforce 0.0 0.0 0.0


# We move minimize process before fix shake command now, because, fix shake bonds does
# NOT work with energy minimization. Reason: minimize process tends to minimize the bonds
# energy (for sure it will adjust the bond length), while fix shake bonds will freeze bond length.
minimize 1.0e-4 1.0e-6 5000 10000
reset_timestep 0

# According to literature, we need to apply bond constraints to all the -C-H-
# no matter to which molecule groups (bmpy or ntf2) the -C-H- bond belongs
# https://pubs.acs.org/doi/10.1021/acs.jctc.9b00689
# This list is only for pure [bmpy][ntf2]
fix SHAKE all shake 0.0001 20 0 b 3 4 6 7 11 13 14 15 17 18 20 21 23 24 25 26 27 28 29 30

# Immobile Pt atoms will lower the shown temperatures, since it's average of both
# mobile & immboile atoms. Here we want to calculate the temperature of Mobile atoms ONLY.
# https://docs.lammps.org/compute_temp.html
# We use a compute command. To refer it, we need to use c_computeID
compute myTemp mobile temp


##run 50 ps of equilibration & NVE, ONLY for mobile (IL+Pt)ions!
fix fxcsvr mobile temp/csvr ${T} ${T} 0.1 53369
fix fxnve mobile nve
thermo ${statstep}
run 50000
unfix fxcsvr  #this will stop equilibration
##run 50 ps of equilibration

# what to write to log file. New thermo_style custom argument: c_myTemp
thermo ${statstep} #save statistics every $(statstep) steps and next line tells you what to save
thermo_style custom step temp c_myTemp press cpu pxx pyy pzz pxy pxz pyz ke pe etotal density lx ly lz

# what to write trajectory: Still for all atoms here (including Pt atoms)
# atom full style: atom-ID molecule-ID atom-type q xu yu zu
dump dumpTrj all custom ${trajstep} traj01.trj id mol type q xu yu zu
dump_modify dumpTrj sort id

# compute chunk/atom: Create the chunk for each atom defined by types of molecules (bmpy or ntf2)
# molecule (as a command style) uses the molecule ID of each atom as its chunk ID.
# ids = once, assign chunk IDs to atoms only once, they persist thereafter
# nchunk = once, only compute the number of chunks once
# compress = yes, compress chunk IDs to eliminate IDs with no atoms
compute cc1 bmpy chunk/atom molecule ids once nchunk once compress yes
compute cc2 ntf2 chunk/atom molecule ids once nchunk once compress yes
# compute cc3 H2 chunk/atom molecule ids once nchunk once compress yes

# compute com/chunk: calculates a global array where the number of rows = the number
# of chunks, and Nchunk is calculated by the specified compute chunk/atom command.
# The number of columns is 3 for the (x,y,z) center-of-mass coordinates of each
# chunk (each molecule of a specific molecule type like bmpy).
# This compute calculates the center-of-mass
compute ckbmpy all com/chunk cc1
compute ckntf2 all com/chunk cc2
# compute ckH2 all com/chunk cc3

# No need to calculate the center-of-mass velocity for the moment
# compute vckbmpy all vcm/chunk cc1
# compute vckntf2 all vcm/chunk cc2
# compute vckH2 all vcm/chunk cc3

# '*' here in 'c_ckbmpy[*]' refers to all the columns in the compute ckbmpy
fix fxchk1 all ave/time ${comstep} 1 ${comstep} c_ckbmpy[*] file coms_bmpy.out mode vector
fix fxchk2 all ave/time ${comstep} 1 ${comstep} c_ckntf2[*] file coms_ntf2.out mode vector
# fix fxchk3 all ave/time ${comstep} 1 ${comstep} c_ckH2[*] file coms_H2.out mode vector

###############################################################################
# MD
###############################################################################
run ${numSteps}
write_data     traj.data
write_restart  traj.restart
